-- rsync -rtv <local_folder> <uniqname>@login.engin.umich.edu:<remote_folder>
-- Deleted CONSTRAINT fk# cause GSI said Foreign Key # and CONSTRAINT isn't required 
-- and can complicate stuff
-- FOLLOW THE ORDER
-- MIND NOT NULL
-- 05/11 2nd
CREATE TABLE USERS(
    USER_ID INTEGER NOT NULL PRIMARY KEY,
    YEAR_OF_BIRTH INTEGER,
    MONTH_OF_BIRTH INTEGER,
    DAY_OF_BIRTH INTEGER,
    FIRST_NAME VARCHAR2(100) NOT NULL,
    LAST_NAME VARCHAR2(100) NOT NULL,
    GENDER VARCHAR2(100)
);

CREATE TABLE FRIENDS(
    USER1_ID INTEGER NOT NULL,
    USER2_ID INTEGER NOT NULL,
    CHECK (USER1_ID != USER2_ID),
    CONSTRAINT friendship PRIMARY KEY (USER1_ID, USER2_ID),
    FOREIGN KEY (USER1_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (USER2_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE CITIES(
    CITY_ID INTEGER NOT NULL PRIMARY KEY,
    CITY_NAME VARCHAR2(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    STATE_NAME VARCHAR2(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    COUNTRY_NAME VARCHAR2(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    UNIQUE(CITY_NAME, STATE_NAME, COUNTRY_NAME)
);

CREATE TABLE MESSAGES( -- MESSAGES NO MESSAGE
    MESSAGE_ID INTEGER PRIMARY KEY,
    SENDER_ID INTEGER NOT NULL,
    RECEIVER_ID INTEGER NOT NULL,
    MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
    SENT_TIME TIMESTAMP NOT NULL,
    FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID)
);

CREATE TABLE PROGRAMS(
    PROGRAM_ID INTEGER NOT NULL PRIMARY KEY,
    INSTITUTION VARCHAR(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    CONCENTRATION VARCHAR(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    DEGREE VARCHAR(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    UNIQUE(INSTITUTION,CONCENTRATION,DEGREE)
);

CREATE TABLE USER_CURRENT_CITIES(
    USER_ID INTEGER NOT NULL PRIMARY KEY,
    CURRENT_CITY_ID INTEGER NOT NULL,
    FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) -- Added user ID foreign key
);

CREATE TABLE USER_HOMETOWN_CITIES(
    USER_ID INTEGER NOT NULL PRIMARY KEY,
    HOMETOWN_CITY_ID INTEGER NOT NULL,
    FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES(CITY_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) -- Added user ID foreign key
);

CREATE TABLE USER_EVENTS( 
    EVENT_ID INTEGER NOT NULL PRIMARY KEY,
    EVENT_CREATOR_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS(USER_ID),
    EVENT_NAME VARCHAR2(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    EVENT_TAGLINE VARCHAR2(100), -- -- Changed VARCHAR2(150) to 100
    EVENT_DESCRIPTION VARCHAR2(100), -- Changed VARCHAR2(150) to 100
    EVENT_HOST VARCHAR2(100), -- Changed VARCHAR2(150) to 100
    EVENT_TYPE VARCHAR2(100), -- Changed VARCHAR2(150) to 100
    EVENT_SUBTYPE VARCHAR2(100), -- Changed VARCHAR2(150) to 100
    EVENT_ADDRESS VARCHAR2(2000), -- Changed VARCHAR2(150) to 2000
    EVENT_CITY_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES(CITY_ID),
    EVENT_START_TIME TIMESTAMP, -- Changed VARCHAR2(150) to 100
    EVENT_END_TIME TIMESTAMP
);
CREATE TABLE ALBUMS(
    ALBUM_ID INTEGER NOT NULL PRIMARY KEY,
    ALBUM_OWNER_ID INTEGER NOT NULL,
    FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS(USER_ID),
    ALBUM_NAME VARCHAR2(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
    ALBUM_MODIFIED_TIME TIMESTAMP,
    ALBUM_LINK VARCHAR2(2000) NOT NULL, -- Changed VARCHAR2(150) to 2000
    ALBUM_VISIBILITY VARCHAR2(100) NOT NULL, -- Changed VARCHAR2(150) to 100
    CHECK (ALBUM_VISIBILITY IN ('Everyone','Friends','Friends_Of_Friends','Myself')),
    COVER_PHOTO_ID INTEGER NOT NULL
);

CREATE TABLE PHOTOS(
    PHOTO_ID INTEGER NOT NULL PRIMARY KEY,
    ALBUM_ID INTEGER NOT NULL ,
    PHOTO_CAPTION VARCHAR2(2000),
    PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
    PHOTO_MODIFIED_TIME TIMESTAMP,
    PHOTO_LINK VARCHAR2(2000) NOT NULL
);

ALTER TABLE ALBUMS
ADD CONSTRAINT to_photos FOREIGN KEY (COVER_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID) INITIALLY DEFERRED DEFERRABLE;

CREATE TABLE PARTICIPANTS( -- PRIMARY KEY, ORDER
    EVENT_ID INTEGER NOT NULL,
    FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS(EVENT_ID),
    USER_ID INTEGER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    CONFIRMATION VARCHAR(100) NOT NULL,
    CHECK (CONFIRMATION IN ('Attending', 'Declines', 'Unsure', 'Not_Replied')),
    PRIMARY KEY (EVENT_ID, USER_ID)
);

ALTER TABLE PHOTOS
ADD CONSTRAINT to_albums FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS(ALBUM_ID) INITIALLY DEFERRED DEFERRABLE;


CREATE TABLE EDUCATION(
    USER_ID INTEGER NOT NULL REFERENCES USERS(USER_ID),
    PROGRAM_ID INTEGER NOT NULL REFERENCES PROGRAMS(PROGRAM_ID),
    PROGRAM_YEAR INTEGER NOT NULL,
    CONSTRAINT education_relation PRIMARY KEY (USER_ID, PROGRAM_ID)
);

CREATE TABLE TAGS(
    TAG_PHOTO_ID INTEGER NOT NULL REFERENCES PHOTOS(PHOTO_ID),
    TAG_SUBJECT_ID INTEGER NOT NULL REFERENCES USERS(USER_ID),
    TAG_X INTEGER NOT NULL,
    TAG_Y INTEGER NOT NULL,
    TAG_CREATED_TIME TIMESTAMP NOT NULL,
    CONSTRAINT tag_relation PRIMARY KEY (TAG_PHOTO_ID, TAG_SUBJECT_ID)
);

CREATE SEQUENCE CITY_SEQ_2 START WITH 1 INCREMENT BY 1;
CREATE TRIGGER INSERT_CITIES
    BEFORE INSERT ON CITIES
    FOR EACH ROW
        BEGIN
            SELECT CITY_SEQ_2.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
        END;
/
CREATE SEQUENCE PROG_SEQ_2 START WITH 1 INCREMENT BY 1;
CREATE TRIGGER INSERT_PROGRAM
    BEFORE INSERT ON PROGRAMS
    FOR EACH ROW
        BEGIN
            SELECT PROG_SEQ_2.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
        END;
/

CREATE TRIGGER Order_Friend_Pairs
    BEFORE INSERT ON Friends
    FOR EACH ROW
        DECLARE temp INTEGER;
        BEGIN
            IF :NEW.user1_id > :NEW.user2_id THEN
                temp := :NEW.user2_id;
                :NEW.user2_id := :NEW.user1_id;
                :NEW.user1_id := temp;
            END IF;
        END;
/